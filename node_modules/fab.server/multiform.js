///////////////
// MULTIFORM //
///////////////
module.exports = function( write, callback ) {
  var querystring = require( 'querystring' );
  return write( function read( write, head, body ) {
    return fab.queue( function( queue ) {
      
      if ( head.method != 'POST' ) {  
        queue( write( ':( Sorry, form method must be POST ' ) ); 
        return fab.ignore;
      }//END IF
      if ( head.headers[ 'content-type' ].search( /multipart\/form-data/ ) == -1 ) {
        queue( write( ':( Sorry, form enctype must be multipart/form-data' ) );
        return fab.ignore;
      }//END IF
       
      var boundary = head.headers[ 'content-type' ].split( '=' )[ 1 ]
        , bytesToLoad = parseInt( head.headers[ 'content-length' ] )
        , chunksTogether = new Buffer( bytesToLoad )
        , bytesLoaded = null
        , indicator = null
        , store4parse
        , map = []
        , slots = {}
        , data = {}
        ;

      function trigger ( data ) { 
        var fabObj = data;
        fabObj.write = function ( content ) {  queue( write( content ) ); };
        fabObj.head = head
        callback( fabObj );
      }//END TRIGGER

      function slotMashine ( charSlot, match ) {
        var slot = String.fromCharCode( charSlot );   
        if ( ! slots[ match ] ) slots[ match ] = []; 
        if ( slot == match[ slots[ match ].length ] ) slots[ match ].push( slot );
        else slots[ match ] = [];

        if ( slots[ match ].length == match.length ) {  
          slots[ match ] = [];
          return true;
        }//END IF
      }//END SLOTMASHINE

      function parse () {
        if ( map.length == 2 ) {
          var parser = chunksTogether.toString( 'utf8', map[ 0 ], map[ 1 ] ).replace(  /\r|\n/g, '' )
            , name = parser.match( /name="(.*?)"/ ) 
            , filename = parser.match( /filename="(.*?)"/ )
            , type = parser.match( /Content-Type: (.*)/ )
            ;
          store4parse = name[ 1 ]; 
          if ( !data[ store4parse ] ) data[ store4parse ] = {}; //CREATE DATA ELEMENT 
          if ( filename ) data[ 'filename' ] = filename[ 1 ]; // SAVE FILENAME
          if ( type ) data[ 'type' ] = type[ 1 ];
        } 
        else if ( map.length == 3 ) {  
          var parser = chunksTogether.slice( map[ 1 ], map[ 2 ] );
          data[ store4parse ] = parser;
          map = [];
        }//END IF/ELSE IF
      }//END PARSE
      
      body( function ( chunk ) {
        if ( chunk ) { 
          for ( var i = 0; i <= chunk.length; i++ ) {
            if ( slotMashine( chunk[ i ], 'Content-Disposition: ') ) map.push( indicator + i );
            if ( slotMashine( chunk[ i ], '\n\r\n' ) ) map.push( indicator + i + 1 );
            if ( slotMashine( chunk[ i ], '\n--' + boundary ) ) map.push( indicator + i - boundary.length - 1 );
            parse();
         
            chunksTogether[ indicator + i ] = chunk[ i ];// COPY EACH PART OF THE CHUNK TO BUF
            bytesLoaded += chunk.length;
          
            if ( i == chunk.length ) indicator = indicator + i;
            if ( bytesToLoad == indicator && data ) trigger( data );
          }//END LOOP
        }//END IF 
      });//END BODY
      return fab.ignore;
    });//END FAB.QUEUE
  });//END WRITE
};//END POST/GET