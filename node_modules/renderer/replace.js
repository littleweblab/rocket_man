/////////////
// REPLACE //
//////////////////////////////////////////////
// fab: (fab) code to search and replace in //
// tag: element that should be replaced     //
// identifier: id or class?                 //
// newContent: callback function that       //
//             returns Content that will    //
//             replace the old one          //
/////////////////////////////////////////////////////////////////////////////////
// sample: require('renderer/replace')( tpl, 'MENU', '( P )( "replaced" )()' ) //
/////////////////////////////////////////////////////////////////////////////////
module.exports = function ( fab, tag, identifier, newContent ) {
  var req = "\\)\\n(\\s*?)\\(.*" + tag + ".*\\)"
    , replaces = fab.match( new RegExp( req , 'g' ) )
    , exclude = []
    ;
    
    for ( var i in replaces ) {
       var rId = new RegExp( identifier + ': \\"(.*?)\\"' )
         , rId2 = new RegExp( identifier + '": \\"(.*?)\\"' ) 
         , currentId = replaces[ i ].match( rId ) || replaces[ i ].match( rId2 ) //Needed because browser set identifier in blockqutes on save. I#Am shure this can be solved with one reg but i have not the time!
         ;
      
      if ( currentId != null ) {
        var whitespaces = replaces[ i ].match( new RegExp( req ) )[ 1 ].length
          , rTag = new RegExp( '\\n(\\s*?)\\(.*' + tag +'.*'+ currentId[ 0 ].replace(/\$/g, '\\$') +'.*\\)(.|\\n)*?(\\n\\s{' + whitespaces + '}\\(\\s*\\))\\n' )
          , match = fab.match( rTag )
          ;
         
        if ( match != null ) {
          var hasChildOfTheSameKind = match[ 0 ].match( req );
          /////////////////////////////////////////////
          // EXCLUDE NESTED WITH THE SAME IDENTIFYER //
          /////////////////////////////////////////////
          if ( hasChildOfTheSameKind != null ) { 
            var hasExclude = hasChildOfTheSameKind[ 0 ].match( rId );
            if ( hasExclude != null ) exclude.push( hasExclude[ 0 ] );//Prevents replace of nested elements of the same tag by putting them to an explude list. 
          }//END IF
          
          //////////////////////
          // MAKE THE REPLACE //
          //////////////////////
          if ( match != null && require( 'renderer/helper' ).inArray( exclude, currentId ) == -1 ) {
            var replaceWith = newContent( whitespaces / 2, currentId[ 1 ] );
            /////////////////////////////////
            // IF CALLBACK RETURN SOMTHING //
            /////////////////////////////////
            if ( replaceWith ) fab = fab.replace( match[ 0 ], '\n' + newContent( whitespaces / 2, currentId[ 1 ] ) );
          }//END IF
        }//END IF    
      }//END IF
   }//END LOOP
   
   return fab;
};