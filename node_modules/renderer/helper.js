////////////
// HELPER //
////////////
module.exports = {
  deepCopyObject: function ( source, obj ) {
    if ( obj == undefined ) obj = {};
    for ( var i in source ) {
      if ( typeof source[ i ] == 'object' ) obj[ i ] = arguments.callee( source[ i ] );
      else obj[ i ] = source[ i ];
    }//END LOOP
    return obj;
  }//END DEEPCOPYOBJECT  
  , makeArrayPath: function ( parent, path, pages, kind ) {
    if ( pages == undefined ) pages = {};
    if ( parent == 0 || ! pages[ parent ]  ) return path; 
    
    path.unshift( pages[ parent ][ kind || 'pageid' ] );
    return arguments.callee ( pages[ parent ].parent, path, pages );
  }//END MAKEARRAYPATH
  , inArray: function ( array, search ) {
    for ( var i in array ) if ( array[ i ] == search ) return parseInt( i ); 
    return -1;
  }//END INARRAY
  , isNumber: function ( data, unit ) {
    if ( typeof data == 'number' ) return data + unit; 
    return data;
  }//END IS NUMBER
  , instanceOfObjExist: function (obj, prop) {
      //comes from http://stackoverflow.com/questions/4676223/check-if-object-member-exists-in-nested-object
      var parts = prop.split( '.' );
        for ( var i = 0, l = parts.length; i < l; i++ ) {
          var part = parts[ i ];
          if ( obj !== null && typeof obj === "object" && part in obj ) obj = obj[ part ];
          else return false;
        }//END LOOP
      return true;
  }//END INSTANCEOFOBJEXIST 
  , objLength: function ( obj ) {
    var size = 0, key;
    for ( var key in obj ) if ( obj.hasOwnProperty( key ) ) size++;
    return size;
  }//END OBJLENGTH
  , makePageObj: function ( mysql ) {
      var pages = {};
      for ( var i in mysql ) {
        pages[ mysql[ i ].pageid ] = mysql[ i ];
        //delete pages[ mysql[ i ].pageid ].pageid;
      };//END LOOP
      return pages;
  }//END MAKE PAGE OBJ
  , pagesChildLength: function ( pages, pageid, count ) { 
      var childId = '';
      for ( var i in pages ) if ( pages[ i ].parentid == pageid ) { 
        childId = pages[ i ].pageid;
        count++;
      }//END LOOP 
      if ( childId == '' ) return count;
      return arguments.callee ( pages, childId, count );
  }//END PAGE SCHILD LENGTH 
  , findAttribute: function ( attr, searchFor ) {  
      for ( var i in attr )  if ( attr[ i ].name == searchFor ) return i;
      return -1;
  }

}//END HELPER