////////////////
// RENDER TPL //
////////////////////////////////////////////////////////////
// tree: bifork tree obj                                  //
// pages: pages obj                                       //
// page: name of the page wich is rendered                //
// fab: return template as pseododom obj or as (fab) code //
////////////////////////////////////////////////////////////
module.exports = function  ( tree, pages, page, fab ) { 

  var helper = require( './helper' ) 
    , fab = ! fab ? require( './tofab' ).toFab : false 
    , menu = require( './menu' ) 
    , pseudoDom = {}
    , start
    , menuObj = {}
    ;
  ///////////////////////////////////////////
  // PARSE BIF TREE ELEMENTS TO PSEUDO DOM //
  ///////////////////////////////////////////  
  for ( var i in tree ) ! function ( tree, i ) { 
    if ( tree.task == 'item' ) return;
    //////////////////////
    // CREATE FUTURE ID //
    //////////////////////
    var id =  tree.ident  || tree.type == 'page' 
             ? tree.ident 
             : tree.parent + '_' +  pseudoDom[ tree.parent ].childNodes.length
             ;
    ///////////////////////////////////
    // CREATE GRID CONTAINER OR PAGE //
    ///////////////////////////////////
    if ( helper.instanceOfObjExist( tree, 'storage.overwrite.menu' ) ) {
      menuObj[ id ] = { 
        level: tree.storage.overwrite.menu.level
      , deep: tree.storage.overwrite.menu.deep
      , filter: tree.storage.overwrite.menu.filter
      , directions: tree.storage.overwrite.menu.directions 
      }
    }//END IF
    
    pseudoDom[ tree.ident ] = {
      nodeName: 'DIV'
    , nodeType: 1
    , childNodes: tree.html 
                  ? helper.instanceOfObjExist( tree, 'storage.overwrite.menu' ) 
                    ? [ menu( 
                          pages
                        , page
                        , id
                        , tree.storage.overwrite.menu.level
                        , tree.storage.overwrite.menu.deep
                        , tree.storage.overwrite.menu.filter
                        , tree.storage.overwrite.menu.directions
                        , true 
                        )
                      ] 
                      : tree.html 
                        : []
    , attributes: [ 
        { name: 'class', value: ( ! tree.task ) ? 'GRID' : ( tree.type != 'page' ) ? 'CONTAINER' : 'PAGE' }
      , { name: 'id',  value: id } 
      ]
    };
    if ( tree.type == 'page'  ) start = pseudoDom[ tree.ident ];// Save first element of the tree to find the start later
    else if ( tree.parentident ) pseudoDom[ tree.parentident ].childNodes.push( pseudoDom[ tree.ident ] );
    else if ( pseudoDom[ tree.parent ] ) pseudoDom[ tree.parent ].childNodes.push( pseudoDom[ tree.ident ] );
  }( tree[ i ], i );
  
  if ( fab ) return { tpl: fab( start ) , menu: menuObj  } ;
  return { tpl: start, menu: menuObj };
};//END TPL