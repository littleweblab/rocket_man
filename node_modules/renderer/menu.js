/////////////////
// RENDER MENU //
////////////////////////////////////////////////////////////////////////////////////
// allPages: pages obj                                                               //
// page: name of the page wich is rendered                                        //
// id: id of the parent styleable                                                 //
// level: level in the pagetree where the render schould start to diplay the menu //
// deep: how much levels in the tree benath the page will be shown                //
// parseThroughfilter: on true all pages will be shown in menu else only          //
//                     the pages that are on the path to the page                 //
// directions: Array with a direction for level                                   //
// fab: return menu as pseododom obj or as (fab) code                             //
////////////////////////////////////////////////////////////////////////////////////
module.exports = function ( allPages, page, id, level, deep, parseThroughfilter, directions, fab ) {
  
  var helper = require( './helper' ) 
    , filter = require( './filter' ) 
    , parseFab = typeof fab == 'number'  ? require( './tofab' ).toFab : false 
    , menu = {}
    , revolver = []
    , pages = ( parseThroughfilter == false ) ? allPages : filter( allPages, page, level, deep )
    , selectedPage = page
    , dataMenuObj
    ;
   
  ///////////////////////
  // LOOP TROUGH PAGES //
  ///////////////////////
  function loop ( page, pages ) {
   
    if ( ! page.length ) { 
      
      /////////////
      // ADD CSS //
      /////////////
      ! function makeClass ( items, level ) {
         
        for ( var current in items ) {
          
          var createClassName = id + '-' + level
            , aAttr = items[ current ].childNodes[ 0 ].attributes
            ;
          
          ////////
          // LI //
          ////////
          items[ current ].attributes = [ { name: 'class', value: 'ITEM-' + directions[ level ] } ];
          
          ///////
          // A //
          //////////////
          // POSITION //
          //////////////
          if ( items.length == 1 ) createClassName += '-one';//First 
          else if ( current == 0 ) createClassName += '-first';//First 
          else if ( current == items.length - 1 ) createClassName += '-last';//Last
          else createClassName += '-item';//Item        
          
          ///////
          // A //
          ///////////
          // STADI //
          ///////////
          if ( items[ current ].childNodes.length > 1 &&  parseThroughfilter == true ) createClassName += '-sub';//If item contains Submenu
          else if ( selectedPage == items[ current ].name ) createClassName += '-selected'//If page is the selected one
          else createClassName += '-default';         
         
          ///////
          // A //
          //////////////////////
          // ADD TO PSEUDODOM //
          //////////////////////
          if ( helper.findAttribute( aAttr, 'class' ) == -1 ) aAttr.push({ name: 'class', value: createClassName });
         
          ///////////////////
          // ANOTHER LEVEL //
          ///////////////////
          if ( items[ current ].childNodes.length > 1 ) { 
              var menuAttr = items[ current ].childNodes[ 1 ].attributes
                , aAttr = items[ current ].childNodes[ 0 ].attributes
                , aAttrClass = helper.findAttribute( aAttr, 'class' )
                ;
              
              makeClass( items[ current ].childNodes[ 1 ].childNodes, level + 1 );
              
              ///////
              // A //
              /////////////////////////
              // CHANGE STUDI TO SUB //
              /////////////////////////
              aAttr[ aAttrClass ].value = aAttr[ aAttrClass ].value.replace( '-selected', '-sub' ).replace( '-default', '-sub' );
            
              //////////////////////
              // MENU LEVEL 2 + 3 //
              //////////////////////
              if ( helper.findAttribute( menuAttr, 'class' ) == -1 ) menuAttr.push( { name: 'class', value: 'FUNCTION-' + directions[ level + 1 ] } );//Add css class
          }//END IF
        }//END LOOP  
      }(  menu.menu_0.childNodes, ( level - 1 )  )
      ;
      
      //////////////////
      // MENU LEVEL 1 //
      //////////////////
      if ( helper.inArray( menu.menu_0.attributes, 'class' ) == -1 ) menu.menu_0.attributes.push( { name: 'class', value: 'FUNCTION-' + directions[ 0 ] } );//Add css class
      if ( helper.inArray( menu.menu_0.attributes, 'data-menu' ) == -1 ) menu.menu_0.attributes.push( dataMenuObj );//Add menu information

      return;  
    }//END IF
    
    for ( var x in pages  ) if ( pages[ x ].parentid == page[ 1 ] && pages[ x ].previd == 0 ) revolver.push( [ pages, 0 , page[ 1 ], pages, menu  ] );//If another level exists beneath this page
    
    var name = page[ 1 ]
      , pageObj =  page[ 0 ]
      , path = '/' + helper.makeArrayPath( pageObj.parentid, [ pageObj.urlname ], pages, 'urlname' ).join( '/' )
      , parent = 'menu_' + pageObj.parentid || 0
      , childLength = helper.pagesChildLength( allPages, pageObj.pageid, 0 )
      ;

    dataMenuObj = { name: 'data-menu', value: id + '-' + ( pageObj.parentid || 0 ) + '-' + level + '-' + deep + '-' +  ( !! parseThroughfilter  ? 1 : 0 ) + '-' + directions.join('$')  }//Create information about menu

     
   ///////////////////////////
   // MAKE LIST ITEM < LI > //
   ///////////////////////////
   menu[ name ] = {
      nodeName: 'li'
    , name:  name
    , nodeType: 1
    , childNodes: []  
   };
  /////////////////////
    // MAKE HREF < A > //
    /////////////////////
    menu[ name ].childNodes.push( {
        nodeName: 'a'
      , nodeType: 1
      , attributes: [ { name: 'href', value: path }, { name: 'data-id', value: pages[ name ].pageid }, { name: 'data-childLength', value: childLength } ]
      , childNodes: [ { 'nodeType': 3, 'nodeValue': pages[ name ].pagename, 'nodeName': 'TEXT' } ]
    } );
    ///////////////////////////////
    // MAKE PARENT MENU < MENU > //
    ///////////////////////////////
    if ( ! menu[ parent ] ) { 
      menu[ parent ] = { 
        nodeName: 'menu'
      , nodeType: 1
      , childNodes: []
      , attributes: []
      };
      
       if ( menu[ pageObj.parentid ] ) menu[ pageObj.parentid ].childNodes.push( menu[ parent ] );
    };//END IF
    
    var childNodes = menu[ parent ].childNodes;
    
    
    //////////////////////////////////
    // FIND POSITION IN PARENT MENU //
    //////////////////////////////////
    for ( var x in childNodes ) if ( childNodes[ x ].name == pageObj.previd ){ 
      childNodes.splice( x + 1, 0, menu[ name ] );
    }
    ////////////////////////
    // NO POSITION EXISTS //
    ////////////////////////
    if ( ! childNodes.length || pageObj.previd == 0 ) childNodes.unshift( menu[ name ] );
    
    return loop ( getNext( pages, page[ 1 ], page[ 0 ].parentid ), pages, menu )
  };//END LOOP
  
  /////////////
  // GETNEXT //
  /////////////
  function getNext ( pages, id, parent ) {
    for ( var i in pages ) if ( pages[ i ].previd == id && pages[ i ].parentid == parent )  return [ pages[ i ], i ];
    return [];
  };//END GETNEXT
  
  //////////////////////////////////////////////////////////
  // IF FILTER RETURNS NO MENU INFORAMTION RETURN NOTHING //
  //////////////////////////////////////////////////////////
  if ( pages == 'no menu' ) menu.menu_0 = { 'nodeType': 3, 'nodeValue': 'No Menu', 'nodeName': 'TEXT' };  
  
  ///////////////////////////////////
  // ELSE REMOVE MENU AS PSEODODOM //
  ///////////////////////////////////
  else loop( getNext( pages, 0, 0 ), pages, {} );
  
  ///////////////////////////////////
  // LOOP ALSO PARKING TREE LEVELS //
  ///////////////////////////////////
  for ( var i in revolver ) loop( getNext( revolver[ i ][ 0 ], revolver[ i ][ 1 ] , revolver[ i ][ 2 ] ), revolver[ i ][ 3 ], revolver[ i ][ 4 ] );
  
  if ( typeof parseFab == 'function' ) return parseFab( menu.menu_0, fab );
  return menu.menu_0;
};